@using Impact.Website.Helper
@model Impact.Website.Models.QuarterViewModel
@{
    ViewBag.Title = "Overarbejde";
}
<div class="container">
    <h2>Vælg kvartal</h2>
    <div class="row">
        @using (Html.BeginForm("Index", "Overtime", FormMethod.Post, new {id = "quarterForm", name = "quarterForm"}))
        { 
            <div class="col-md-12">
                <form>
                    <div class="form-group form-inline">
                        @Html.DropDownListFor(m => m.SelectedQuarter, Model.Quarters, new {@class = "form-control", onchange = "Submit()"})
                        @Html.CheckBoxFor(m => m.BarColumnChartViewModel.IsNormalized, new { id = "toggle-normalized", data_toggle = "toggle", data_off = "Registrerede Timer", data_on = "Udbetale Timer",})
                        @if (Model.ShowIncludeAllWeeksButton)
                        {
                            @Html.CheckBoxFor(m => m.IncludeAllWeeks, new { id = "toggle-allWeeks", data_toggle = "toggle", data_off = "Tidligere uger", data_on = "Alle uger",})                            
                        }
                    </div>
                </form>
            </div>
        }
    </div>
    <div class="row">
        <div class="col-md-12">
            <div id="@Model.BalanceChartViewModel.DivId"></div>
        </div>
    </div>
</div>
<div class="container-fluid">
    <div class="row">
        <div class="col-md-12">
            <div id="@Model.BarColumnChartViewModel.DivId"></div>
        </div>
    </div>
</div>
<div class="container">
    <div class="row">
        <div class="col-md-4">
            <div id="@Model.PieChartViewModel.DivId"></div>
        </div>
        <div class="col-md-4">
            <div id="@Model.PotentialChartViewModel.DivId"></div>
        </div>
    </div>
</div>
@Scripts.Render("~/bundles/charts")
<script>
    function Submit() {
        document.quarterForm.submit();
    }

    window.onload = function() {
        var balance = @JavaScriptConvert.SerializeObject(Model.BalanceChartViewModel);
        var weeks = @JavaScriptConvert.SerializeObject(Model.BarColumnChartViewModel);
        var pie = @JavaScriptConvert.SerializeObject(Model.PieChartViewModel);
        var potential = @JavaScriptConvert.SerializeObject(Model.PotentialChartViewModel);

        google.charts.load('current', { packages: ['corechart', 'bar', 'gauge'] });
        google.charts.setOnLoadCallback(function() {
//            drawMaterialBarOrColumnChart(balance); 
            drawColumnChart(weeks); 
            drawPieChart(pie); 
            drawGaugeChart(potential);
        });
    };
</script>