@using System.Globalization
@using Impact.Core.Constants
@model Impact.Website.Models.VacationViewModel
@{
    ViewBag.Title = "Ferieoversigt";
     var remainingVacationDays = Model.VacationYear.TotalVacationDays - @Model.SummedVacationDays;
     var remainingExtraVacationDays = Model.VacationYear.TotalExtraVacationDays - Model.SummedExtraVacationDays;
}
<style>
    /*Overwrite white squares to green to better highlight Holidays*/
    rect[fill="#ffffff"][stroke-width="1"] {
    	fill: #28a745 !important;
    }
</style>
<div class="container">
    <h2>Vælg ferieår</h2>
    <div class="row">
        <div class="col-md-12">
            @using (Html.BeginForm("Index", "Vacation", FormMethod.Post, new {id = "vacationForm", name = "vacationForm"}))
            {
                <div class="col-md-12">
                    <form>
                        <div class="form-group form-inline">
                            @Html.DropDownListFor(m => m.SelectedVacationYear, Model.VacationYears, new {@class = "form-control", onchange = "Submit()"})
                        </div>
                    </form>
                </div>
            }
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <p>Feriedage tilbage: @Model.VacationYear.TotalVacationDays - @Model.SummedVacationDays = <strong>@remainingVacationDays dage</strong> / @(remainingVacationDays * ApplicationConstants.NormalWorkDay) timer *</p>
            <p>Feriefridage tilbage: @Model.VacationYear.TotalExtraVacationDays - @Model.SummedExtraVacationDays = <strong>@remainingExtraVacationDays dage</strong> / @(remainingExtraVacationDays * ApplicationConstants.NormalWorkDay) timer *</p>
            <p>
                <svg width="16" height="16">
                    <rect width="16" height="16" style="fill:#4e7ce1;stroke-width:1;stroke:#ffffff"/>
                </svg>
                Ferie
                <br/>
                <svg width="16" height="16">
                  <rect width="16" height="16" style="fill:#e8792a;stroke-width:1;stroke:#ffffff" />
                </svg>
                Feriefridage
                <br/>
                <svg width="16" height="16">
                    <rect width="16" height="16" style="fill:#28a745;stroke-width:1;stroke:#ffffff" />
                </svg>
                Helligdage
            </p>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <div id="@Model.DivId"></div>
            Her er helligdagene i det indeværende ferie år
            <ul>
                @foreach (var vacationDay in Model.VacationDays.Where(d => !string.IsNullOrEmpty(d.Comment)))
                {
                    <li>@vacationDay.Date.ToString("dd MMMM yyyy") - @vacationDay.Comment</li>
                }
            </ul>
            <p>* Det antages at medarbejderen har optjent fuld ferie og FF dage. De @Model.VacationYear.TotalVacationDays ferie- og @Model.VacationYear.TotalExtraVacationDays FF-dage er <strong>ikke</strong> udregnet ud fra tidligere registreringer.</p>
            <p>** Feriefridage er på grafen ovenfor vist med negative tal (f.eks. -7.5). Dette er gjort for at de skal fremstå med en anden farve (orange) og dermed er nemmere at skelne fra den regulære ferie (blå). Hellidage er vist med værdien 0, og farven bliver overstyret i css så den er grøn i stedet for hvid (Der er pt. ingen måde at vælge farven i frameworket)</p>
            <p>*** Hvis en dag både indeholder ferie timer og FF timer, så er tallene lagt sammen, og bliver vist med blå farve</p>
        </div>
    </div>
</div>
@Scripts.Render("~/bundles/charts")
<script>
    function Submit() {
        document.vacationForm.submit();
    }

    window.onload = function() {
        google.charts.load('current', { packages: ['calendar'] });
        google.charts.setOnLoadCallback(function() {
            drawChart();
            addHolidayDescription();
        });
    };
    
    function drawChart() {
        var dataTable = new google.visualization.DataTable();
        dataTable.addColumn({ type: 'date', id: 'Date' });
        dataTable.addColumn({ type: 'number', id: 'Ferie/Feriefridage' });
        dataTable.addRows([
          @foreach (var day in Model.VacationDays)
          {
              <text>[ new Date(@day.Date.Year, @day.Date.Month-1, @day.Date.Day), @day.GetHours()],</text>
          }
        ]);
        
        var options = {
            title: "@Html.Raw(Model.VacationYear.GetLongDisplayString())",
            height: 350,
        };
        
        var chart = new google.visualization.Calendar(document.getElementById('@Model.DivId'));
        chart.draw(dataTable, options);
    }
    
    function addHolidayDescription() {
        // Select the node that will be observed for mutations
        const targetNode = document.getElementById('@Model.DivId');
        
        // Options for the observer (which mutations to observe)
        const config = { attributes: false, childList: true, subtree: true };
        
        let dict = {};
        @foreach (var day in Model.VacationDays.Where(d => !string.IsNullOrEmpty(d.Comment)))
        {
            var key = day.Date.ToString("MMMM d, yyyy: ", ApplicationConstants.EnglishCultureInfo.DateTimeFormat) + day.GetHours();
            <text>dict['@key'] = '@Html.Raw(HttpUtility.JavaScriptStringEncode(day.Comment))';</text>
        }
        
        console.log(dict);
        
        const callback = function(mutationsList, observer) {
            for(let mutation of mutationsList) {
                let node = mutation.addedNodes[0];
                if (mutation.type === 'childList' && 
                    mutation.addedNodes.length === 1 &&
                    node.className === 'google-visualization-tooltip') {
                    
                    let innerText = node.innerText;
                    let dictElement = dict[innerText];
                    if (dictElement === undefined) 
                        return;
                    
                    let strings = innerText.split(':');
                    let newInnerText;
                    if (strings[1].trim() === '0') {
                        newInnerText = strings[0].concat(':<br/>', dictElement);
                    } else {
                        newInnerText = strings[0].concat(':<br/>', strings[1], ', ', dictElement);
                    }
                    
                    node.innerHTML = node.innerHTML.replace(innerText, newInnerText);
                    node.style.width = 'auto';
                }
            }
        };
        
        // Create an observer instance linked to the callback function
        const observer = new MutationObserver(callback);
        
        // Start observing the target node for configured mutations
        observer.observe(targetNode, config);
    }
</script>